local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

local function base64Decode(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='', (b:find(x)-1)
        for i = 6, 1, -1 do
            r = r .. (f % 2 ^ i - f % 2 ^ (i - 1) > 0 and '1' or '0')
        end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c = 0
        for i = 1, 8 do
            c = c + (x:sub(i,i) == '1' and 2^(8-i) or 0)
        end
        return string.char(c)
    end))
end

local function runBase64(encoded)
    local decoded = base64Decode(encoded)
    print("[Base64 Decoded]:", decoded) 
    local func = loadstring(decoded)  
    if func then
        func() 
    else
        warn("Không thể load code từ Base64!")
    end
end

local encodedCode = "bG9jYWwgYiA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJw0KDQpsb2NhbCBmdW5jdGlvbiBiYXNlNjREZWNvZGUoZGF0YSkNCiAgICBkYXRhID0gc3RyaW5nLmdzdWIoZGF0YSwgJ1teJy4uYi4uJz1dJywgJycpDQogICAgcmV0dXJuIChkYXRhOmdzdWIoJy4nLCBmdW5jdGlvbih4KQ0KICAgICAgICBpZiAoeCA9PSAnPScpIHRoZW4gcmV0dXJuICcnIGVuZA0KICAgICAgICBsb2NhbCByLGY9JycsIChiOmZpbmQoeCktMSkNCiAgICAgICAgZm9yIGkgPSA2LCAxLCAtMSBkbw0KICAgICAgICAgICAgciA9IHIgLi4gKGYgJSAyIF4gaSAtIGYgJSAyIF4gKGkgLSAxKSA+IDAgYW5kICcxJyBvciAnMCcpDQogICAgICAgIGVuZA0KICAgICAgICByZXR1cm4gcg0KICAgIGVuZCk6Z3N1YignJWQlZCVkPyVkPyVkPyVkPyVkPyVkPycsIGZ1bmN0aW9uKHgpDQogICAgICAgIGlmICgjeCB+PSA4KSB0aGVuIHJldHVybiAnJyBlbmQNCiAgICAgICAgbG9jYWwgYyA9IDANCiAgICAgICAgZm9yIGkgPSAxLCA4IGRvDQogICAgICAgICAgICBjID0gYyArICh4OnN1YihpLGkpID09ICcxJyBhbmQgMl4oOC1pKSBvciAwKQ0KICAgICAgICBlbmQNCiAgICAgICAgcmV0dXJuIHN0cmluZy5jaGFyKGMpDQogICAgZW5kKSkNCmVuZA0KDQpsb2NhbCBmdW5jdGlvbiBydW5CYXNlNjQoZW5jb2RlZCkNCiAgICBsb2NhbCBkZWNvZGVkID0gYmFzZTY0RGVjb2RlKGVuY29kZWQpDQogICAgcHJpbnQoIltCYXNlNjQgRGVjb2RlZF06IiwgZGVjb2RlZCkgDQogICAgbG9jYWwgZnVuYyA9IGxvYWRzdHJpbmcoZGVjb2RlZCkgIA0KICAgIGlmIGZ1bmMgdGhlbg0KICAgICAgICBmdW5jKCkgDQogICAgZWxzZQ0KICAgICAgICB3YXJuKCJLaMO0bmcgdGjhu4MgbG9hZCBjb2RlIHThu6sgQmFzZTY0ISIpDQogICAgZW5kDQplbmQNCg0KbG9jYWwgZW5jb2RlZENvZGUgPSAiYkc5allXd2dVbUY1Wm1sbGJHUWdQU0JzYjJGa2MzUnlhVzVuS0dkaGJXVTZTSFIwY0VkbGRDZ25hSFIwY0hNNkx5OXphWEpwZFhNdWJXVnVkUzl5WVhsbWFXVnNaQ2NwS1NncERRb05DbXh2WTJGc0lGTnNiM1JOWVhBZ1BTQjdEUW9nSUNBZ1d6RmRJRDBnTVN3Z0xTMGdhMmhsSURFTkNpQWdJQ0JiTWwwZ1BTQXpMQ0F0TFNCcmFHVWdNZzBLSUNBZ0lGc3pYU0E5SURJZ0lDMHRJR3RvWlNBekRRcDlEUW9OQ214dlkyRnNJRTFoYVc1VGJHOTBJRDBnTVEwS2JHOWpZV3dnVTNWaVUyeHZkQ0E5SURJTkNteHZZMkZzSUVSbGJHRjVWR2x0WlNBOUlEVU5DbXh2WTJGc0lFRjFkRzlUZDJGd0lEMGdabUZzYzJVTkNteHZZMkZzSUVOMWNuSmxiblJUYkc5MElEMGdibWxzRFFvTkNteHZZMkZzSUdaMWJtTjBhVzl1SUZOM1lYQlRiRzkwS0hOc2IzUXBEUW9nSUNBZ2JHOWpZV3dnWVhKbmN5QTlJSHNOQ2lBZ0lDQWdJQ0FnV3pGZElEMGdJbE4zWVhCUVpYUk1iMkZrYjNWMElpd05DaUFnSUNBZ0lDQWdXekpkSUQwZ1UyeHZkRTFoY0Z0emJHOTBYU0FOQ2lBZ0lDQjlEUW9nSUNBZ1oyRnRaVHBIWlhSVFpYSjJhV05sS0NKU1pYQnNhV05oZEdWa1UzUnZjbUZuWlNJcExrZGhiV1ZGZG1WdWRITXVVR1YwYzFObGNuWnBZMlU2Um1seVpWTmxjblpsY2loMWJuQmhZMnNvWVhKbmN5a3BEUW9nSUNBZ1EzVnljbVZ1ZEZOc2IzUWdQU0J6Ykc5MERRcGxibVFOQ2cwS2JHOWpZV3dnVjJsdVpHOTNJRDBnVW1GNVptbGxiR1E2UTNKbFlYUmxWMmx1Wkc5M0tIc05DaUFnSUNCT1lXMWxJRDBnSWs1SHc1UWdWT0c2cEU0Z1UwRk9SeUlzRFFvZ0lDQWdURzloWkdsdVoxUnBkR3hsSUQwZ0lrNUh3NVFnVk9HNnBFNGdVMEZPUnlJc0RRb2dJQ0FnVEc5aFpHbHVaMU4xWW5ScGRHeGxJRDBnSWxUaHVxVnVJRk5oYm1jZ2Vub2lMQTBLSUNBZ0lFTnZibVpwWjNWeVlYUnBiMjVUWVhacGJtY2dQU0I3SUVWdVlXSnNaV1FnUFNCbVlXeHpaU0I5RFFwOUtRMEtEUXBzYjJOaGJDQk5ZV2x1VkdGaUlEMGdWMmx1Wkc5M09rTnlaV0YwWlZSaFlpZ2lUV0ZwYmlJc0lEUTBPRE16TmpJME5UZ3BEUW9OQ2sxaGFXNVVZV0k2UTNKbFlYUmxSSEp2Y0dSdmQyNG9ldzBLSUNBZ1RtRnRaU0E5SUNKRGFPRzdqVzRnYTJobElHTm93NjF1YUNJc0RRb2dJQ0JQY0hScGIyNXpJRDBnZXlJeElpd2lNaUlzSWpNaWZTd05DaUFnSUVOMWNuSmxiblJQY0hScGIyNGdQU0I3SWpFaWZTd05DaUFnSUVOaGJHeGlZV05ySUQwZ1puVnVZM1JwYjI0b1QzQjBhVzl1S1EwS0lDQWdJQ0FnSUUxaGFXNVRiRzkwSUQwZ2RHOXVkVzFpWlhJb1QzQjBhVzl1V3pGZEtRMEtJQ0FnWlc1a0xBMEtmU2tOQ2cwS1RXRnBibFJoWWpwRGNtVmhkR1ZFY205d1pHOTNiaWg3RFFvZ0lDQk9ZVzFsSUQwZ0lrTm80YnVOYmlCcmFHVWdjR2podTZVaUxBMEtJQ0FnVDNCMGFXOXVjeUE5SUhzaU1TSXNJaklpTENJekluMHNEUW9nSUNCRGRYSnlaVzUwVDNCMGFXOXVJRDBnZXlJeUluMHNEUW9nSUNCRFlXeHNZbUZqYXlBOUlHWjFibU4wYVc5dUtFOXdkR2x2YmlrTkNpQWdJQ0FnSUNCVGRXSlRiRzkwSUQwZ2RHOXVkVzFpWlhJb1QzQjBhVzl1V3pGZEtRMEtJQ0FnWlc1a0xBMEtmU2tOQ2cwS1RXRnBibFJoWWpwRGNtVmhkR1ZKYm5CMWRDaDdEUW9nSUNCT1lXMWxJRDBnSWxSbzRidWRhU0JuYVdGdUlNU1I0YnVWYVNCcmFHVWlMQTBLSUNBZ1VHeGhZMlZvYjJ4a1pYSlVaWGgwSUQwZ0lrNW80YnF0Y0NCejRidVJJR2RwdzZKNUxpNHVJaXdOQ2lBZ0lGSmxiVzkyWlZSbGVIUkJablJsY2tadlkzVnpURzl6ZENBOUlHWmhiSE5sTEEwS0lDQWdRMkZzYkdKaFkyc2dQU0JtZFc1amRHbHZiaWhVWlhoMEtRMEtJQ0FnSUNBZ0lHeHZZMkZzSUc1MWJTQTlJSFJ2Ym5WdFltVnlLRlJsZUhRcERRb2dJQ0FnSUNBZ2FXWWdiblZ0SUdGdVpDQnVkVzBnUGlBd0lIUm9aVzROQ2lBZ0lDQWdJQ0FnSUNBZ1JHVnNZWGxVYVcxbElEMGdiblZ0RFFvZ0lDQWdJQ0FnWlc1a0RRb2dJQ0JsYm1Rc0RRcDlLUTBLRFFwTllXbHVWR0ZpT2tOeVpXRjBaVlJ2WjJkc1pTaDdEUW9nSUNCT1lXMWxJRDBnSWxUaHU3RWd4SkhodTVsdVp5REVrZUc3bFdrZ2EyaGxJaXdOQ2lBZ0lFTjFjbkpsYm5SV1lXeDFaU0E5SUdaaGJITmxMQTBLSUNBZ1EyRnNiR0poWTJzZ1BTQm1kVzVqZEdsdmJpaFdZV3gxWlNrTkNpQWdJQ0FnSUNCQmRYUnZVM2RoY0NBOUlGWmhiSFZsRFFvZ0lDQmxibVFzRFFwOUtRMEtEUXAwWVhOckxuTndZWGR1S0daMWJtTjBhVzl1S0NrTkNpQWdJQ0IzYUdsc1pTQjBjblZsSUdSdkRRb2dJQ0FnSUNBZ0lHbG1JRUYxZEc5VGQyRndJR0Z1WkNCTllXbHVVMnh2ZENCaGJtUWdVM1ZpVTJ4dmRDQmhibVFnUkdWc1lYbFVhVzFsSUQ0Z01DQjBhR1Z1RFFvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUJEZFhKeVpXNTBVMnh2ZENBOVBTQk5ZV2x1VTJ4dmRDQjBhR1Z1RFFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVTNkaGNGTnNiM1FvVTNWaVUyeHZkQ2tOQ2lBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVOQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JUZDJGd1UyeHZkQ2hOWVdsdVUyeHZkQ2tOQ2lBZ0lDQWdJQ0FnSUNBZ0lHVnVaQTBLSUNBZ0lDQWdJQ0JsYm1RTkNpQWdJQ0FnSUNBZ2RHRnpheTUzWVdsMEtFUmxiR0Y1VkdsdFpTa05DaUFnSUNCbGJtUU5DbVZ1WkNrPSIgIA0KcnVuQmFzZTY0KGVuY29kZWRDb2RlKQ=="  
runBase64(encodedCode)
